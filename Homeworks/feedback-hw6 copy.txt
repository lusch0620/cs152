;; _total-score_                   91 / 100
Good job! :)
;; Week 6 Assignment

;; === automated correctness ===

                                   TESTING LISTS
product_info struct: {Name, Category, productID, current_stock, min_for_restock, max_after_restock}
Note: In each column, top item is head of list (index 0) and bottom item is end of list

test_list/restock_list_1
{Sugar, Grocery, 571, (test_list = 7/ restock_list_1 = 3), 4, 8}
{Printer, Office, 8112, 8, 6, 16)}
{Pen, Office, 10000, (test_list = 20/ restock_list_1 = 0), 10, 35}
{Chocolate, Grocery, 92622,7,4,8}
{1-Milk, Grocery, 23765, (test_list = 17/ restock_list_1 = 6), 10, 30}

restock_list_2

{VPN router, Office,380571, 3, 4, 8}
{Soylent, Hobby, 9657, 2, 6, 16}
{Inhaler, Pharmacy, 3898, 0, 10, 35}
{Protein, Grocery, 4545,4,4,8}
{Chocolate, Grocery, 92622,7,4,8}


;; create_product                8.0 / 8
{1-Milk, Grocery, 23765, 17, 10, 30} => CORRECT
+ 3.0 / 3.0
{Advil, Pharmacy, 92622, 7, 4, 8} => CORRECT
+ 3.0 / 3.0
{Printer, Office, 8112, 8, 6, 16} => CORRECT
+ 2.0 / 2.0

;; insert_head                8.0 / 8
inserting {Vitamins, Pharmacy, 10, 7, 4, 8} in to test_list => CORRECT
+ 4.0 / 4.0
inserting {Drone, Hobby, 19, 9, 4, 25} in to test_list => CORRECT
+ 4.0 / 4.0

;; find                7.0 / 8
finding product with ID: 10000 in test_list =>  CORRECT
+ 5.0 / 5.0
finding product with ID: 23765 in test_list =>  CORRECT
+ 2.0 / 2.0
finding product with ID: 12345 in test_list => INCORRECT: Segmentation fault
+ 0.0 / 1.0

;; record_restocked_single                3.0 / 5
restocking product with ID: 8112 in test_list =>  CORRECT
+ 3.0 / 3.0
restocking product with ID: (empty list) in in test_list => INCORRECT: Segmentation fault
+ 0.0 / 1.0
restocking product with ID: 12345 in test_list => INCORRECT: Segmentation fault
+ 0.0 / 1.0

;; product_sold                        3.0 / 5
selling product with ID: 8112 in test_list =>  CORRECT
+ 3.0 / 3.0
selling product with ID: (empty list) in test_list => INCORRECT: Segmentation fault
+ 0.0 / 1.0
selling product with ID: 12345 in test_list => INCORRECT: Segmentation fault
+ 0.0 / 1.0

;; add_sorted_productID                        7.0 / 8
adding product with ID: 10 in test_list =>  CORRECT
+ 3.0 / 3.0
adding product with ID: 92621 in test_list =>  CORRECT
+ 3.0 / 3.0
adding product with ID: NULL_product in test_list => INCORRECT: Segmentation fault
+ 0.0 / 1.0
adding product with ID: empty_list in test_list =>  CORRECT
+ 1.0 / 1.0

;; add_sorted_category_ID                        7.0 / 8
adding product with (ID, category): (4544, GROCERY) in SORTED restock_list_2 =>  CORRECT
+ 3.0 / 3.0
adding product with (ID, category): (380572, OFFICE) in SORTED restock_list_2 =>  CORRECT
+ 3.0 / 3.0
adding product with (ID, category): (NULL, NULL) in SORTED restock_list_2 => INCORRECT: Segmentation fault
+ 0.0 / 1.0
adding product with (ID, category): (empty_list, empty_list) in SORTED restock_list_2 =>  CORRECT
+ 1.0 / 1.0

;; make_restock_list                        2.0 / 10
Making restock list for restock_list_1 => INCORRECT: Segmentation fault
+ 0.0 / 4.0
Making restock list for restock_list_2 => INCORRECT: Segmentation fault
+ 0.0 / 4.0
Making restock list for NULL =>  CORRECT
+ 2.0 / 2.0

;; record_restocked_list                        10.0 / 10
Recording restock list for restock_list_1 =>  CORRECT
+ 4.0 / 4.0
Recording restock list for restock_list_2 =>  CORRECT
+ 4.0 / 4.0
Recording restock list for NULL_restock_list =>  CORRECT
+ 1.0 / 1.0
Recording restock list for empty_list =>  CORRECT
+ 1.0 / 1.0

;; automated_correctness_subtotal_:             55.0 / 70

;; === 
;; partial credit returned via visual inspection - only for
;; problems on which you earned fewer points than you can get back.
;; if you got more than 0 points, then the partial credit is scaled.
;; look at code for grader notes if bugs identified

;; make_restock_list 
+6 forgot to malloc new head

;; automated_correctness_subtotal:	     61 / 70 


;; === style ===

;; well-written purposes              4 / 4
;; proper indentation, line breaks    4 / 4
;; well-named variables		      4 / 4
;; adequate tests                     6 / 6

;; === efficiency ===
;; good decisions for control structures 6 / 6

;; cushion for grading errors		6 / 6	
;; regrade requests will only be accepted of the 
;; change is worth more than 6 pts

;; style _subtotal_:		   30 / 30

;; graded by Vanessa Cai
